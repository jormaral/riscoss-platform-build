{
  "author": {
    "name": "Caleb James DeLisle"
  },
  "name": "xmhell",
  "description": "Read XML into a JSON structure and then convert that JSON back into XML.",
  "version": "0.1.2",
  "repository": {
    "url": "https://github.com/cjdelisle/xmhell.git",
    "type": "git"
  },
  "main": "./index",
  "__IGNORE__bin": {
    "xml2json": "./bin/xml2json"
  },
  "dependencies": {},
  "devDependencies": {
    "whiskey": "~0.6.13",
    "diff": "~1.0.4",
    "nthen": "~0.1.0"
  },
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "node test/run.js"
  },
  "readme": "# XMHell - XML to JSON and back.\n\n*XML is like violence. Sure, it seems like a quick and easy solution at first, but then it spirals out of control into utter chaos.* - Sarkos\n\n![xml-rocks](https://raw.github.com/cjdelisle/xmhell/master/xml.gif)\n\nThis library exports 4 functions.\n\n* `parse()`: same as JSON.parse(), takes a string and returns a javascript object.\n* `write()`: takes an object, a writer (anything with a function called write), and a callback.\nWrites the JSON object as XML and then calls the callback when complete.\n* `escape()`: Escapes XML entities.\n* `unescape()`: You get the idea.\n\nExample:\n\n    > var XMHell = require('xmhell');\n    > j = XMHell.parse('<?xml?>\\n<doc><x><y>abcdefg</y></x><!-- comment --></doc>');\n    { doc: \n       { x: { y: 'abcdefg' },\n         '#COMMENT': ' comment ' } }\n    > \n    > XMHell.write(j, process.stdout, function() { console.log('done!'); });\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <doc>\n      <x>\n        <y>abcdefg</y>\n      </x>\n      <!-- comment -->\n    </doc>\n    done!\n    >\n\nYou can provide a function in place of a string in your JSON document and this function will be\ncalled with a writer and a callback to be called upon completion. The provided writer escapes XML\nentities.\n\n    > var async = function(writer, callback) { writer.write('async & stuff'); callback(); };\n    > XMHell.write({\"a\":async}, process.stdout);\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <a>async &amp; stuff</a>\n\nMultiple tags by the same name are converted to numbered keys in the json hash.\n\n    > XMHell.parse('<?xml?><doc><x/><x/><x/><x/><x/><x/></doc>');\n    { doc: \n       { x: '',\n         'x 2': '',\n         'x 3': '',\n         'x 4': '',\n         'x 5': '',\n         'x 6': '' } }\n\nAny trailing numbers are stripped from the key when generating the tag name.\n\n    > XMHell.write({'a 9000':1, 'a 3': 2, a:3}, process.stdout);\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <a>1</a>\n    <a>2</a>\n    <a>3</a>\n\nComments, cdata and doctypes are expressed using special keys called `#COMMENT`,\n`#CDATA` and `#DOCTYPE`.\n\n    > XMHell.parse('<?xml?><!DOCTYPE blah><!-- This is a comment --><![CDATA[yay cdata]]>');\n    { '#DOCTYPE': 'blah',\n      '#COMMENT': ' This is a comment ',\n      '#CDATA': 'yay cdata' }\n\n\n## There are millions of XML parsers, why would you do such a thing?!\n\nThis parser concentrates on making it possible to represent any valid XML as *something* in JSON\nwhere it can be manipulated and then converted to XML. It preserves comments and prettyprints the\nresult with 2 spaces per tab.\n\n## What if you feed it invalid XML?\n\nNo idea, how about you try and find out!\nIf it makes you feel better, this parser is guaranteed not to generate invalid json.\n\n## Does it support attributes and namespaces?\n\nSure does!\n\n    <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:media=\"http://search.yahoo.com/mrss/\" xml:lang=\"en-US\">\n    </feed>\n\nConverts to:\n\n    \"feed xmlns=\\\"http://www.w3.org/2005/Atom\\\" xmlns:media=\\\"http://search.yahoo.com/mrss/\\\" xml:lang=\\\"en-US\\\"\": {\n    }\n\n## How about custom entities?\n\nLOL you're joking right?\n\n## This idea is bad and you should feel bad.\n\nWhat did you expect? XMHeaven? Anyway this was\n[not](http://en.wikipedia.org/wiki/Jean_Paoli)\n[my](http://en.wikipedia.org/wiki/Tim_Bray)\n[idea](http://en.wikipedia.org/wiki/Michael_Sperberg-McQueen).\n\n## Your [angle bracket tax](http://www.codinghorror.com/blog/2008/05/xml-the-angle-bracket-tax.html) is due!\n\nSend an invoice.\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/cjdelisle/xmhell/issues"
  },
  "homepage": "https://github.com/cjdelisle/xmhell",
  "_id": "xmhell@0.1.2",
  "_from": "xmhell@>=0.1.2 <0.2.0"
}
